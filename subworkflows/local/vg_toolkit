include { VG_CONSTRUCT } from '../../modules/nf-core/vg/construct/main.nf'
include { VG_INDEX } from '../../modules/nf-core/vg/index/main'
include { VG_AUTOINDEX } from '../../modules/local/vg/autoindex/main.nf'
include { VG_GIRAFFE } from '../../modules/local/vg/giraffe/main.nf'
include { VG_FILTER } from '../../modules/local/vg/filter/main.nf'
include { VG_PACK } from '../../modules/local/vg/pack/main.nf'
include { VG_SNARLS } from '../../modules/local/vg/snarls/main.nf'
include { VG_CALL } from '../../modules/local/vg/call/main.nf'
include { BCFTOOLS_SORT as BCFTOOLS_SORT_SAMPLES } from '../../modules/local/bcftools/sort/main'
include { BCFTOOLS_SORT as BCFTOOLS_SORT2 } from '../../modules/nf-core/bcftools/sort/main'
include { BCFTOOLS_SORT as BCFTOOLS_SORT3 } from '../../modules/nf-core/bcftools/sort/main'
include { BCFTOOLS_INDEX as BCFTOOLS_INDEX1 } from '../../modules/nf-core/bcftools/index/main'
include { BCFTOOLS_INDEX as BCFTOOLS_INDEX2 } from '../../modules/nf-core/bcftools/index/main'
include { BCFTOOLS_INDEX as BCFTOOLS_INDEX3 } from '../../modules/nf-core/bcftools/index/main'
include { BCFTOOLS_REHEADER } from '../../modules/nf-core/bcftools/reheader/main'
include { BCFTOOLS_CONCAT as BCFTOOLS_CONCAT_FREEBAYES } from '../../modules/nf-core/bcftools/concat/main'
include { BCFTOOLS_CONCAT as BCFTOOLS_CONCAT_VG_CALL } from '../../modules/nf-core/bcftools/concat/main'
include { BCFTOOLS_MERGE } from '../../modules/nf-core/bcftools/merge/main'
include { BCFTOOLS_NORM } from '../../modules/nf-core/bcftools/norm/main'
include { VG_PATHS } from '../../modules/local/vg/paths/main'
include { TABIX_TABIX } from '../../modules/nf-core/tabix/tabix/main'
include { TABIX_TABIX as TABIX_TABIX_1} from '../../modules/nf-core/tabix/tabix/main'
include { TABIX_SUBSET } from '../../modules/local/tabix/tabix/main'
include { TABIX_TABIX as TABIX_TABIX_2} from '../../modules/nf-core/tabix/tabix/main'
include { TABIX_TABIX as TABIX_TABIX_3} from '../../modules/nf-core/tabix/tabix/main'
include { SAMTOOLS_FAIDX as SAMTOOLS_FAIDX_1 } from '../../modules/nf-core/samtools/faidx/main'
include { SAMTOOLS_FAIDX as SAMTOOLS_FAIDX_2 } from '../../modules/nf-core/samtools/faidx/main'
include { VG_STATS } from '../../modules/local/vg/stats/main'
include { VG_SURJECT } from '../../modules/local/vg/surject/main'
include { FREEBAYES } from '../../modules/nf-core/freebayes/main'
include { SAMTOOLS_MERGE } from '../../modules/nf-core/samtools/merge/main'
include { SAMTOOLS_INDEX } from '../../modules/nf-core/samtools/index/main'
include { GUNZIP } from '../../modules/nf-core/gunzip/main'
include { VG_CONVERT } from '../../modules/local/vg/convert/main'
include { SAMTOOLS_SORT } from '../../modules/nf-core/samtools/sort/main'
include { COMBINE_FASTA_FILES } from '../../modules/local/combine_fasta/main'
include { BEDTOOLS_MAKEWINDOWS } from '../../modules/nf-core/bedtools/makewindows/main'
include { BEDTOOLS_BAMTOBED } from '../../modules/nf-core/bedtools/bamtobed/main'

workflow VG_TOOLKIT {

    ch_ref = Channel.fromPath ( file(params.fasta) ).map { genome -> 
                    tuple ([id:genome.simpleName], genome) }

    // Reference Genome
    if ( params.fasta.endsWith('.gz') )

        ch_fasta = GUNZIP ( ch_ref ).gunzip
    
    else {

        ch_fasta = ch_ref

    }

    // Switches for using params index or build one in nextflow
    if (params.tbi) {
    
        ch_vcf_tbi = Channel.fromPath ( file(params.vcf) ).map { vcf -> 
                tuple ([id:vcf.simpleName], vcf, file(params.tbi)) }
    
    } else {
        
        ch_vcf = Channel.fromPath( file(params.vcf) ).map { vcf -> 
                tuple ([id:vcf.simpleName], vcf) }

        ch_tbi = TABIX_TABIX_1(ch_vcf).tbi

        ch_vcf_tbi = ch_vcf.join(ch_tbi, by:0)
    
    }
    if (params.fai) {
        
        ch_fai = Channel.fromPath ( file(params.fai) ).map { fai -> 
                tuple ([id:fai.simpleName], fai) }
    
    } else {

        ch_fai = SAMTOOLS_FAIDX_1 ( ch_fasta, [[:],[]] ).fai.map { meta, fai -> 
                tuple ([id:fai.simpleName], fai) }

    }

    // -----------------------------------------------------------------
    // Create Channel with List of Chromosomes (Scaffolds/Contigs)
    // 
    ch_fai.map{it[1]}.splitCsv(sep:'\t').map{it[0]}.set{contig}

    // subset vcf to contain specific regions
    TABIX_SUBSET ( ch_vcf_tbi, contig )

    // Augment Channel to include meta.region
    ch_subset_vcf = TABIX_SUBSET.out.vcf.map { meta, subset, vcf ->
            metaf = [:]
            metaf.id = meta.id
            metaf.region = subset
            return [ metaf, vcf ]
        }
    // split and captured meta.region for identifying. maintain meta.region here avoids .tokenize('_')
    //////////////

    TABIX_TABIX ( ch_subset_vcf )

    ch_vcf_tbi_insfasta_fasta_fai = ch_subset_vcf.combine( TABIX_TABIX.out.tbi, by:0 )
        .map { meta, vcf, tbi -> [meta, vcf, tbi, []] }
        .combine(ch_fasta.map{it[1]})
        .combine(ch_fai.map{it[1]})

    VG_CONSTRUCT ( ch_vcf_tbi_insfasta_fasta_fai )

    VG_INDEX ( VG_CONSTRUCT.out.graph )

    //SUBSET_FASTA (  )

    //SAMTOOLS_FAIDX_FASTAS (  )

    ch_vcf_tbi_fasta_fai = ch_vcf_tbi_insfasta_fasta_fai.map{meta, vcf, tbi, insfasta, fasta, fai -> [meta, vcf, tbi, fasta, fai]}


    VG_AUTOINDEX ( ch_vcf_tbi_fasta_fai, 'giraffe' )

    VG_CONVERT ( VG_AUTOINDEX.out.gbz )

    ch_gbz_min_dist = VG_AUTOINDEX.out.gbz
        .join(VG_AUTOINDEX.out.min, by: 0)
        .join(VG_AUTOINDEX.out.dist, by: 0)

    // now create fastq channel for alignment using giraffe
    ch_fq = Channel.fromFilePairs(params.fq).map { id, fq ->
                tuple ( [id:fq[0].simpleName], fq )
                // multiples fastq files by number of contigs
                }.combine(ch_gbz_min_dist)
                .map { meta, fq_files, meta2, gbz, min, dist -> 
                    metaf = [:]
                    metaf.id = meta.id + '-' + meta2.region
                    metaf.region = meta2.region

                    return [ metaf, fq_files, gbz, min, dist ]
                }

    ch_gam = VG_GIRAFFE ( ch_fq ).gam

    if (params.enable_vgfilter) {

        ch_gam_to_join = VG_GIRAFFE.out.gam.map { meta, gam -> 
            metaf = [:]
            metaf.region = meta.region
            return [ metaf, gam ]
        }

        ch_xg_to_join = VG_CONVERT.out.xg.map { meta, xg -> 
            metaf = [:]
            metaf.region = meta.region
            return [ metaf, xg ]
        }

        ch_gam_xg = ch_gam_to_join.combine(ch_xg_to_join, by: 0).map { meta, gam, xg -> 
            metaf = [:]
            metaf.id = gam.simpleName
            metaf.region = meta.region
            return tuple( metaf, gam, xg )
        }

        ch_gam = VG_FILTER ( ch_gam_xg ).gam
    
        VG_STATS ( ch_gam )
    }

    ch_filtered_gam_gbz = VG_GIRAFFE.out.gam.map { WorkflowVG.removeIdFromGroovyMap(it[0], it[1..-1]) }
        .combine( VG_AUTOINDEX.out.gbz.map { WorkflowVG.removeIdFromGroovyMap(it[0], it[1..-1]) }, by: 0 )
        .map { WorkflowVG.insertIndvIdIntoChannel (it[0], it[1..-1]) }
    
    // check the number of reads
    if (params.enable_vgcall) {

        VG_SNARLS ( VG_CONVERT.out.xg )

        // pre-compute gt support
        VG_PACK ( ch_filtered_gam_gbz )

        ch_pack_gbz_snarls = VG_PACK.out.pack.map { WorkflowVG.removeIdFromGroovyMap(it[0], it[1..-1]) }
            .combine(VG_AUTOINDEX.out.gbz.map { WorkflowVG.removeIdFromGroovyMap(it[0], it[1..-1]) }, by:0)
            .combine(VG_SNARLS.out.snarls.map { WorkflowVG.removeIdFromGroovyMap(it[0], it[1..-1]) }, by:0)
            .map { WorkflowVG.insertIndvIdIntoChannel (it[0], it[1..-1]) }

        // call indv. genotypes
        VG_CALL ( ch_pack_gbz_snarls )
        
        BCFTOOLS_SORT2 ( VG_CALL.out.vcf )

        BCFTOOLS_REHEADER ( BCFTOOLS_SORT2.out.vcf )

        BCFTOOLS_INDEX2 ( BCFTOOLS_REHEADER.out.vcf )

        // rewrite meta.id based on letters before number for grouping
        ch_indv_region_vcf_tbi = BCFTOOLS_REHEADER.out.vcf
        .join( BCFTOOLS_INDEX2.out.tbi, by:0 )
        .map { meta, vcf, tbi ->
            def metaG = [:]
            metaG.id = meta.id.toString().tokenize('_')[0..1].join("_")

            [ metaG , vcf, tbi ]
        }
        .groupTuple(by:0)

        BCFTOOLS_CONCAT_VG_CALL ( ch_indv_region_vcf_tbi )

        BCFTOOLS_SORT3 ( BCFTOOLS_CONCAT_VG_CALL.out.vcf )

        BCFTOOLS_INDEX3 ( BCFTOOLS_SORT3.out.vcf )        

        ch_indv_vcf_tbi = BCFTOOLS_SORT3.out.vcf
            .join( BCFTOOLS_INDEX3.out.tbi, by:0 )
            .map { meta, vcf, tbi ->
            def metaG = [:]
            metaG.id = meta.id.toString().split(/[^\p{L}]/)[0]
            metaG.variant_caller = 'vg-call'

            [ metaG , vcf, tbi ]
        }
        .groupTuple(by:0)

        BCFTOOLS_MERGE ( ch_indv_vcf_tbi )

        TABIX_TABIX_2 ( BCFTOOLS_MERGE.out.merged_variants )

        ch_vgcall_vcf_tbi = BCFTOOLS_MERGE.out.merged_variants.join(TABIX_TABIX_2.out.tbi, by:0)

    } else {

        ch_vgcall_vcf_tbi = Channel.empty() 
    
    }
    //
    // FREEBAYES
    //
    if (params.enable_freebayes) {

        // convert gam into bam files
        //VG_SURJECT ( ch_filtered_gam_gbz )

        // sort the files for indexing
        SAMTOOLS_SORT ( VG_GIRAFFE.out.bam )

        // deconstruct graph into fasta
        VG_PATHS ( VG_CONSTRUCT.out.graph )

        ch_fastas = VG_PATHS.out.fasta.map { meta, fasta ->
            metaD = [:]
            metaD.id = meta.id
            [ metaD, fasta ]
        }.groupTuple(by:0)

        ch_fasta.view()

        VG_PATHS.out.fasta.view()

        COMBINE_FASTA_FILES ( ch_fastas ).fasta

        // index
        SAMTOOLS_FAIDX_2 ( VG_PATHS.out.fasta, [[:],[]] )

        // combine fasta and fai
        ch_fasta_fai = VG_PATHS.out.fasta.combine(SAMTOOLS_FAIDX_2.out.fai,by:0).map {meta, fasta, fai ->
            metaf = [:]
            metaf.region = meta.region
            [ metaf, fasta, fai ]
        }

        ch_bed = ch_fasta_fai.map { WorkflowVG.convertFaiToBed( it[0], it[2]) }

        // remove id for grouping and combining based on chromosome
        ch_bam_fasta_fai = SAMTOOLS_SORT.out.bam
            .map { meta, bam ->
                metaf = [:]
                metaf.region = meta.region

                return [ metaf, bam ]
            }
            .groupTuple(by:0)
            .combine(ch_fasta_fai, by:0)
            .map { meta, bam, fasta, fai ->
                metaf = [:]
                metaf.id = bam[0].getSimpleName().split(/[^\p{L}]/)[0]
                metaf.region = meta.region

                return [ metaf, bam, fasta, fai ]
            }

        SAMTOOLS_MERGE ( ch_bam_fasta_fai )

        SAMTOOLS_INDEX ( SAMTOOLS_MERGE.out.bam )

        //BEDTOOLS_BAMTOBED ( SAMTOOLS_MERGE.out.bam )

        BEDTOOLS_MAKEWINDOWS ( SAMTOOLS_FAIDX_2.out.fai, [], [], params.windowSize )

        ch_intervals = BEDTOOLS_MAKEWINDOWS.out.bed.map { WorkflowVG.splitBedFile(params, log, it) }.transpose().map { WorkflowVG.removeIdFromGroovyMap(it[0], it[1..-1]) }

        // combine merged bam, index, fasta, fai and add meta.region for freebayes region
        ch_bam_bai_bed_fasta_fai = SAMTOOLS_MERGE.out.bam
            .combine(SAMTOOLS_INDEX.out.bai, by: 0)
            .map { meta, bam, bai ->
                metaf = [:]
                metaf.region = meta.region
                [ metaf, bam, bai ]
            }
            .combine(ch_fasta_fai, by: 0)
            .combine(ch_intervals, by: 0)
            .map { meta, bam, bai, fasta, fai, bed -> 
                metaT = [:]
                metaT.target = bed.simpleName.tokenize('_')[1]
                metaT.id = 'msp' + '_' + meta.region + '_' + metaT.target
                metaT.region = meta.region
                
                
                [ metaT, bam, bai, bed, fasta, fai]
            }


        // how are the individual ID's settled probs from RG
        FREEBAYES ( ch_bam_bai_bed_fasta_fai, [], [], [] )

        BCFTOOLS_SORT_SAMPLES ( FREEBAYES.out.vcf )

        BCFTOOLS_INDEX1 ( BCFTOOLS_SORT_SAMPLES.out.vcf )

        ch_fbvcf_tbi = BCFTOOLS_SORT_SAMPLES.out.vcf
            .join(BCFTOOLS_INDEX1.out.tbi, by: 0)
            .map { meta, vcf, tbi ->
                def metaG = [:]
                metaG.id = meta.id.split(/[^\p{L}]/)[0]

                [ metaG , vcf, tbi ]
            }
            .groupTuple(by:0)

        BCFTOOLS_CONCAT_FREEBAYES ( ch_fbvcf_tbi )

        ch_fb_vcf = BCFTOOLS_CONCAT_FREEBAYES.out.vcf.map { meta, vcf ->
            def metaN = [:]
            metaN.id = meta.id
            metaN.variant_caller = 'freebayes'
            
            return [ metaN, vcf ]
        }

        TABIX_TABIX_3 ( ch_fb_vcf )

        ch_fb_vcf_tbi = ch_fb_vcf.join ( TABIX_TABIX_3.out.tbi, by:0 )

    }

    if (params.normalize_variants) {

        ch_all_vcf_tbi = ch_vgcall_vcf_tbi.mix( ch_fb_vcf_tbi )

        BCFTOOLS_NORM ( ch_all_vcf_tbi, COMBINE_FASTA_FILES.out.fasta.first() )
    }

    emit:
    norm_vcf = BCFTOOLS_NORM.out.vcf

}