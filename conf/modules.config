
process {

    // set default publishing 
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0]}" },
        mode: params.output_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    
    withName: VG_PACK {
        ext.args = { [ 
            '-a'
        ].join(' ').trim() }
    } 

    withName: VG_PACK {
        ext.args = { [ 
            params.min_mapping_quality ? "-Q ${params.min_mapping_quality}" : '',
            params.ignore_first_last_bps ? "-s ${params.ignore_first_last_bps}" : '',
        ].join(' ').trim() }
    } 
    
    withName: VG_FILTER {
        ext.args = { [
            params.min_primary_score ? "-r ${params.min_primary_score}" : '',
            params.norm_based_on_length ? '-f' : '',
            params.use_sub_counts ? '-u' : '',
            params.min_end_matches ? "-m ${params.min_end_matches}" : '',
            params.min_map_qual ? "-q ${params.min_map_qual}" : '',
            params.defray_ends ? "-D ${params.defray_ends}" : '',
        ].join(' ').trim() } 
        
    }
    withName: BCFTOOLS_INDEX {
        ext.args = { [
            params.enable_tbi ? '-t' : ''
        ].join(' ').trim() }
    }
    withName: BCFTOOLS_REHEADER {
        ext.args = '-s new_sample_name.txt'
        ext.args2 = '--output-type z'
    }
    withName: BCFTOOLS_MERGE {
        ext.args = '-Oz'
        publishDir = [
            path: { "${params.outdir}/BCFTOOLS/MERGE" },
            mode: params.output_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: VG_VIEW {
        ext.args = '-X'
        publishDir = [
            path: { "${params.outdir}/VG/VIEW" },
            mode: params.output_mode,
            saveAs : { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_NORM {
        ext.args = { [
            params.atomize_variants ? "-a" : '',
            params.split_multiallelic ? "-m ${params.split_multiallelic}" : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/BCFTOOLS/NORM" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: ""
            ]
        ]
    }
}