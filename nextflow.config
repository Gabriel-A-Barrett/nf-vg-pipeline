/* VG PIPELINE
   ----------- */
params {

    fasta = null
    fai   = null
    vcf   = null
    tbi   = null
    fq    = null

    // vg construct
    max_nodes = 32

    // vg filter
    enable_vgfilter = false
    min_primary_score = 0.90
    norm_based_on_length = true
    use_sub_counts = true
    min_end_matches = 1
    min_map_qual = 15
    defray_ends = 999

    // vg pack
    min_mapping_quality = 5
    ignore_first_last_bps = 0
    expected_coverage = null

    // makewindows
    windowSize       = 1000000
    splitNLines      = 100

    enable_freebayes = true
    
    // Freebayes options
    popmap                         = null
    min_map_qual                   = 5
    min_base_qual                  = 5
    complex_gap                    = 3
    use_best_n_alleles             = 10
    min_alt_fraction               = 0.1
    min_repeat_entropy             = 1
    skip_coverage                  = null
    save_freebayes_intervals       = true
    
    enable_vgcall    = true

    // bcftools index
    enable_tbi = true

    // bcftools norm
    normalize_variants = true // activates workflow
    atomize_variants = true
    split_multiallelic = '-any'
    check_reference_alleles = 'w'

    // VCF Filtering Options
    fraction_missingness_list      = [0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95]
    minor_allele_count_list        = [3, 6, 9, 12, 15]
    fraction_genotypes_missing     = '.95'
    minor_allele_count             = '3'
    minimum_genotype_depth         = '5'
    maximum_genotype_depth         = null
    minimum_indv_fraction_missing  = '.3'

    // Boiler Plate Options
    outdir             = './'
    publish_dir_mode   = 'symlink'
    // saving intermediate files
    
    // Don't Touch
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

}

// add profiles
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        docker.registry        = 'quay.io'
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.enabled          = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.enabled          = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        conda.enabled          = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        conda.enabled          = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        conda.enabled          = false
    }
    test       { includeConfig 'conf/test.config'       }
    simulated  { includeConfig 'conf/simulations.config' }
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    test   { includeConfig 'conf/test.config' }
}

// Load modules.config for DSL2 module specific options
// where to put output and additional arguments for specific modules
includeConfig 'conf/modules.config'

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
    name            = 'RADseq variant graph workflow'
    author          = 'Gabriel Barrett'
    homePage        = null
    description     = null
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}